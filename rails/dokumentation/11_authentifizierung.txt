Rails bringt die Voraussetzungen für eine Authentifizierung mit.
	1. Aktivieren Sie in der Datei "Gemfile" das Gem "gem 'bcrypt', '~> 3.1.7'", in dem Sie das Kommentarzeichen entfernen. 
	2. Das Model, das für die Authentifizierung verwendet wird, in unserem Beispiel User, ist die Angabe... 
			class User < ActiveRecord::Base
  		has_secure_password

  ... nötig.

  Damit stehen in diesem Model verschiedene Methoden zur Verschlüsselung und zur Authentifizierung zur Verfügung.
  3. Ein zentrales Attribut in dem Model is "password"
  Das kann beim Anlegen berücksichtigt werden:
  	rails g model user email password:digest
  In jedem Fall muss in der Migration für das Feld attribut die Zeile stehen:
  		t.string :password_digest
  Dieser Eintrag sorgt dafür, dass in Kombination mir 'has_secure_password' der Passworteintrag in der Tabelle verschlüsselt wird.
  4.	Das Formular zum Anlegen eines Users enthält zwei Textfelder für das Passwort:

  		<%= f.password_field :password %>
      <%= f.password_field :password_confirmation %>

Authentifizierung:

Neben dem Model für die Accounts wird ein Controller 'Sessions' angelegt, in dem die Authentifizierung stattfindet. 

	#rails g controller sessions new

Der Controller hat eine Action für das Login-Formular (new-Action), eine create-Action für das Überprüfen der Login-Daten und eine destroy-Action für das Ausloggen.

Für die Authentifizierung wird eine Methode von bcrypt  (user.authenticate(password)) verwendet.

Wir haben eine eigene Klassenmethode von User mit dem Namen authenticate geschrieben, die wir im Controller aufrufen.

	def self.authenticate(email, password)
  	user = User.find_by(:email => email)
  	user && user.authenticate(password)
  end

Bei einem Fehlschlagen der Authentifizierung wird in das Login-Formular zurückgeleitet.
Bei einem erfolgreichen Authentifizieren wird eine Session-Variable angelegt.
	session[:user_id] = user.id

	Diese Session-Variable wird bei jedem Aufruf im application_controller überprüft.

		def current_user
	  	session[:user_id] = nil
	  	@current_user = User.find(session[:user_id]) if session[:user_id]
	  	
	  end
	  helper_method :current_user

Bein Logout eines Users wird diese Session zerstört:
	
	def destroy
		session[:user_id] = nil
	end

Überprüfung der Authentifizierung im Controller:

Um den Zugriff eines Users zu beschränken, kann im Controller eine Abfrage durchgeführt werden, ob der User eingeloggt ist.

	def require_signin
  	unless current_user
  		redirect_to signin_url, alert: "Erst einloggen du Esel!" 
  	end	
  end

  Wenn die Variable (helper) current_user nicht gefüllt ist, bedeutet das, dass der user nicht angemeldet ist. Er wird dann zum Login-Bereich umgeleitet.

  Beispiel:
  Damit nur ein eingeloggter User andere User sehen kann, aber dennoch das Anlegen eines neuen Users möglich ist, steht dem users_controller:

  	befor_action :require_signin, except: [:new, :create]
  	before_action => vor jeder weiteren Aktivität wird diese Methode ausgeführt.

  	:require_signin => die von uns im application_controller definierte Methode wird ausgeführt

  	except: [:new, :create] => die Actions zum Anlegen eines neuen Users new und create werden ausgenommen.
 

